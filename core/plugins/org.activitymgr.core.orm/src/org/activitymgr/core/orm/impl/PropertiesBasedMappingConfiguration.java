package org.activitymgr.core.orm.impl;

import java.lang.reflect.Field;
import java.util.Properties;

import org.activitymgr.core.orm.IConverter;

public class PropertiesBasedMappingConfiguration implements
		IMappgingConfiguration {

	/** dictionnaire de propri�t�s de configuration */
	private Properties props;

	/**
	 * Constructeur par d�faut.
	 * 
	 * @param props
	 *            dictionnaire de propri�t�s de configuration.
	 */
	public PropertiesBasedMappingConfiguration(Properties props) {
		this.props = props;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.activitymgr.core.orm.IMappgingConfiguration#getSQLTableName(java.
	 * lang.Class)
	 */
	@Override
	public String getSQLTableName(Class<?> theClass) {
		String className = theClass.getName();
		int idx = className.lastIndexOf('.');
		String name = className.substring(idx + 1);
		String key = name + ".table";
		String tableName = props.getProperty(key);
		if (tableName == null)
			throw new IllegalStateException("Nom de table pour la classe '"
					+ name + "' non defini", null);
		return tableName;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.activitymgr.core.orm.IMappgingConfiguration#getSQLColumnName(java
	 * .lang.Class, java.lang.String)
	 */
	@Override
	public String getSQLColumnName(Class<?> theClass, Field attribute) {
		String className = theClass.getName();
		int idx = className.lastIndexOf('.');
		String name = className.substring(idx + 1);
		String key = name + "." + attribute.getName() + ".column";
		String columnName = props.getProperty(key);
		return columnName;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.activitymgr.core.orm.IMappgingConfiguration#getPrimaryKeyAttributesName
	 * (java.lang.Class)
	 */
	@Override
	public String[] getPrimaryKeyAttributesName(Class<?> theClass) {
		String className = theClass.getName();
		int idx = className.lastIndexOf('.');
		String name = className.substring(idx + 1);
		String key = name + ".PrimaryKey";
		String pkList = props.getProperty(key);
		if (pkList == null)
			throw new IllegalStateException("Cle primaire de la classe '"
					+ name + "' non defini", null);
		String[] pkAtrributeNames = pkList.split(" *, *");
		return pkAtrributeNames;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.activitymgr.core.orm.IMappgingConfiguration#getAutoGeneratedAttributeName
	 * (java.lang.Class)
	 */
	@Override
	public Field getAutoGeneratedAttribute(Class<?> theClass) {
		String className = theClass.getName();
		int idx = className.lastIndexOf('.');
		String name = className.substring(idx + 1);
		String key = name + ".AutoGenerated";
		String attributeName = props.getProperty(key);
		return attributeName != null ? ReflectionHelper.select(theClass,
				attributeName) : null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.activitymgr.core.orm.IMappgingConfiguration#getAttributeFormat(java
	 * .lang.Class, java.lang.String)
	 */
	@Override
	public String getAttributeFormat(Class<?> theClass, Field attribute) {
		String className = theClass.getName();
		int idx = className.lastIndexOf('.');
		String name = className.substring(idx + 1);
		String key = name + "." + attribute.getName() + ".format";
		String format = props.getProperty(key);
		return format;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Class<? extends IConverter<?>> getAttributeConverter(
			Class<?> theClass, Field attribute) {
		String className = theClass.getName();
		int idx = className.lastIndexOf('.');
		String name = className.substring(idx + 1);
		String key = name + "." + attribute.getName() + ".converter";
		String converterClassName = props.getProperty(key);
		if (converterClassName == null) {
			return null;
		}
		try {
			return (Class<? extends IConverter<?>>) theClass
					.getClassLoader().loadClass(converterClassName);
		} catch (ClassNotFoundException e) {
			throw new IllegalArgumentException(e);
		}
	}

}
